;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Press 1,2,3,4 to malloc each pointer
; (the key function has logic to stop you from mallocing
; a used pointer)
;
;
; Press q,w,e,r to free each pointer
;
; Press a,s,d,f to realloc each pointer
;
; press z,x,c,v to calloc each pointer
; (the key function has logic to stop you from callocing
; a used pointer)
;
; Press ESC to show the heap size
;
; Lots of excess code in this file
; Check heap.mar for strictly heap code
;
;   Author: Jaggernaut
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


POINTER_ONE_SIZE equ 5
POINTER_TWO_SIZE equ 13
POINTER_THREE_SIZE equ 22
POINTER_FOUR_SIZE equ 6



LEGS_HW equ 0x0001
LASER_HW equ 0x0002
LIDAR_HW equ 0x0003
KB_HW equ 0x0004
DRILL_HW equ 0x0005
INV_HW equ 0x0006
RNG_HW equ 0x0007
CLOCK_HW equ 0x0008
HOLOGRAM_HW equ 0x0009
BATTERY_HW equ 0x000A
FLOPPY_HW equ 0x000B
RADIO_HW equ 0x000C
COM_PORT_HW equ 0x000D

COM_PORT_SELF equ 3

TRUE equ 1
FALSE equ 0

NULL equ 0

BUFFER_LIMIT equ 0x200

KEY_A equ 0x41
KEY_B equ 0x42
KEY_C equ 0x43
KEY_D equ 0x44
KEY_E equ 0x45
KEY_F equ 0x46
KEY_G equ 0x47
KEY_H equ 0x48
KEY_I equ 0x49
KEY_J equ 0x4A
KEY_K equ 0x4B
KEY_L equ 0x4C
KEY_M equ 0x4D
KEY_N equ 0x4E
KEY_O equ 0x4F
KEY_P equ 0x50
KEY_Q equ 0x51
KEY_R equ 0x52
KEY_S equ 0x53
KEY_T equ 0x54
KEY_U equ 0x55
KEY_V equ 0x56
KEY_W equ 0x57
KEY_X equ 0x58
KEY_Y equ 0x59
KEY_Z equ 0x5A

KEY_0 equ 0x30
KEY_1 equ 0x31
KEY_2 equ 0x32
KEY_3 equ 0x33
KEY_4 equ 0x34
KEY_5 equ 0x35
KEY_6 equ 0x36
KEY_7 equ 0x37
KEY_8 equ 0x38
KEY_9 equ 0x39

KEY_TILDE equ 0xc0
KEY_MINUS equ 0xbd
KEY_PLUS equ 0xbb
KEY_COMMA equ 0xbc
KEY_PERIOD equ 0xbe
KEY_SLASH equ 0xbf
KEY_BACKSLASH equ 0xdc
KEY_COLON equ 0xba
KEY_QUOTE equ 0xde
KEY_LEFT_BRACKET equ 0xdb
KEY_RIGHT_BRACKET equ 0xdd

KEY_TAB equ 0x9
KEY_CTRL equ 0x11
KEY_ALT equ 0x12
KEY_ENTER equ 0xd
KEY_SHIFT equ 0x10
KEY_ESC equ 0x1b
KEY_BS equ 0x8
KEY_CAPSLOCK equ 0x14
KEY_SPACE equ 0x20
KEY_MENU equ 0x5d
KEY_WIN equ 0x5b
KEY_PAUSE equ 0x13
KEY_SCROLLLOCK equ 0x91
KEY_INSERT equ 0x2d
KEY_HOME equ 0x24
KEY_PAGE_UP equ 0x21
KEY_PAGE_DOWN equ 0x22
KEY_END equ 0x23
KEY_DELETE equ 0x2e

KEY_UP equ 0x26
KEY_DOWN equ 0x28
KEY_LEFT equ 0x25
KEY_RIGHT equ 0x27

KEY_NUMPAD_0 equ 0x60
KEY_NUMPAD_1 equ 0x61
KEY_NUMPAD_2 equ 0x62
KEY_NUMPAD_3 equ 0x63
KEY_NUMPAD_4 equ 0x64
KEY_NUMPAD_5 equ 0x65
KEY_NUMPAD_6 equ 0x66
KEY_NUMPAD_7 equ 0x67
KEY_NUMPAD_8 equ 0x68
KEY_NUMPAD_9 equ 0x69
KEY_NUMPAD_PERIOD equ 0x6e
KEY_NUMPAD_SLASH equ 0x6f
KEY_NUMPAD_STAR equ 0x6a
KEY_NUMPAD_PLUS equ 0x6b
KEY_NUMPAD_MINUS equ 0x6d
KEY_NUMLOCK equ 0x90

KEY_F1 equ 0x70
KEY_F2 equ 0x71
KEY_F3 equ 0x72
KEY_F4 equ 0x73
KEY_F5 equ 0x74
KEY_F6 equ 0x75
KEY_F7 equ 0x76
KEY_F8 equ 0x77
KEY_F9 equ 0x78
KEY_F10 equ 0x79
KEY_F11 equ 0x7a
KEY_F12 equ 0x7b

.text
    MOV [com_counter], 0

    TEST [resume_vect], [resume_vect]
    JZ run_once
    PUSH [resume_vect]
    MOV bp, [bp_cache]
    MOV sp, [sp_cache]
    MOV [resume_vect], 0
    RET
; Code by chartreuse
; Sleep bot until next tick and then return to where called
_Sleep:
    POP [resume_vect]
    MOV [bp_cache], bp
    MOV [sp_cache], sp
    BRK
;_Sleep end

run_once:
    TEST [ran_once], [ran_once]
    JNZ main

    MOV A, 0
    HWI COM_PORT_HW

    CALL _ClearConsoleBuffer

    PUSH begin_text
    CALL _LoadConsoleBuffer

    MOV A, 4
    MOV B, 0xFFFF
    MOV C, 0xFFFF
    HWI HOLOGRAM_HW

    MOV A, 0
    HWI HOLOGRAM_HW

    MOV [ran_once], 1

main:
    CALL _KeyboardRead

    CALL _HandleKeys
    BRK

_HandleKeys:
    AND [key], [key]
    JZ HandleKeys_done


    CMP [key], KEY_1
    JZ if_1
    CMP [key], KEY_2
    JZ if_2
    CMP [key], KEY_3
    JZ if_3
    CMP [key], KEY_4
    JZ if_4
    CMP [key], KEY_Q
    JZ if_q
    CMP [key], KEY_W
    JZ if_w
    CMP [key], KEY_E
    JZ if_e
    CMP [key], KEY_R
    JZ if_r
    CMP [key], KEY_A
    JZ if_a
    CMP [key], KEY_S
    JZ if_s
    CMP [key], KEY_D
    JZ if_d
    CMP [key], KEY_F
    JZ if_f
    CMP [key], KEY_Z
    JZ if_z
    CMP [key], KEY_X
    JZ if_x
    CMP [key], KEY_C
    JZ if_c
    CMP [key], KEY_V
    JZ if_v
    CMP [key], KEY_ESC
    JZ if_ESC

HandleKeys_next:
    CALL _NextKey
    JMP _HandleKeys

HandleKeys_done:
    RET

    if_1:
        TEST [pointer_one], [pointer_one]
        JNZ HandleKeys_next

        PUSH POINTER_ONE_SIZE
        CALL _PrintMalloc

        MOV [pointer_one], A

        JMP HandleKeys_next
    if_2:
        TEST [pointer_two], [pointer_two]
        JNZ HandleKeys_next

        PUSH POINTER_TWO_SIZE
        CALL _PrintMalloc

        MOV [pointer_two], A

        JMP HandleKeys_next
    if_3:
        TEST [pointer_three], [pointer_three]
        JNZ HandleKeys_next

        PUSH POINTER_THREE_SIZE
        CALL _PrintMalloc

        MOV [pointer_three], A

        JMP HandleKeys_next
    if_4:
        TEST [pointer_four], [pointer_four]
        JNZ HandleKeys_next

        PUSH POINTER_FOUR_SIZE
        CALL _PrintMalloc

        MOV [pointer_four], A

        JMP HandleKeys_next
    if_q:
        MOV A, [pointer_one]
        CALL _PrintFree
        MOV [pointer_one], A
        JMP HandleKeys_next
    if_w:
        MOV A, [pointer_two]
        CALL _PrintFree
        MOV [pointer_two], A
        JMP HandleKeys_next
    if_e:
        MOV A, [pointer_three]
        CALL _PrintFree
        MOV [pointer_three], A
        JMP HandleKeys_next
    if_r:
        MOV A, [pointer_four]
        CALL _PrintFree
        MOV [pointer_four], A
        JMP HandleKeys_next
    if_a:
        MOV A, [pointer_one]
        MOV B, POINTER_ONE_SIZE
        ADD B, 1
        PUSH B
        CALL _PrintRealloc
        MOV [pointer_one], A
        JMP HandleKeys_next
    if_s:
        MOV A, [pointer_two]
        MOV B, POINTER_TWO_SIZE
        ADD B, 1
        PUSH B
        CALL _PrintRealloc
        MOV [pointer_two], A
        JMP HandleKeys_next
    if_d:
        MOV A, [pointer_three]
        MOV B, POINTER_THREE_SIZE
        SUB B, 1
        PUSH B
        CALL _PrintRealloc
        MOV [pointer_three], A
        JMP HandleKeys_next
    if_f:
        MOV A, [pointer_four]
        MOV B, POINTER_FOUR_SIZE
        SUB B, 1
        PUSH B
        CALL _PrintRealloc
        MOV [pointer_four], A
        JMP HandleKeys_next
    if_z:
        TEST [pointer_one], [pointer_one]
        JNZ HandleKeys_next

        PUSH POINTER_ONE_SIZE
        CALL _PrintCalloc

        MOV [pointer_one], A

        JMP HandleKeys_next
    if_x:
        TEST [pointer_two], [pointer_two]
        JNZ HandleKeys_next

        PUSH POINTER_TWO_SIZE
        CALL _PrintCalloc

        MOV [pointer_two], A

        JMP HandleKeys_next
    if_c:
        TEST [pointer_three], [pointer_three]
        JNZ HandleKeys_next

        PUSH POINTER_THREE_SIZE
        CALL _PrintCalloc

        MOV [pointer_three], A

        JMP HandleKeys_next
    if_v:
        TEST [pointer_four], [pointer_four]
        JNZ HandleKeys_next

        PUSH POINTER_FOUR_SIZE
        CALL _PrintCalloc

        MOV [pointer_four], A

        JMP HandleKeys_next
    if_ESC:
        CALL _PrintHeapSize
        JMP HandleKeys_next
;_HandleKeys end


;Increment line_number from line_counter
_UpdateLineNumber:
    PUSH A
    PUSH B
    PUSH C
    PUSH D

    ADD [line_counter], 1
    MOV A, [line_counter]

    MOV A, line_text
    MOV B, 0
    MOV C, 8
    CALL _Memset

    PUSH line_text
    PUSH [line_counter]
    CALL _ItoAString
    MOV [A+7], 0x3A

    POP D
    POP C
    POP B
    POP A
    RET
;_UpdateLineNumber end

; Check if A is valid, return KEY_ value of hex number in A
; Super lazy
; A is 0 if invalid
_ItoAHEX:
    CMP A, 0
    JZ is_num_0
    CMP A, 1
    JZ is_num_1
    CMP A, 2
    JZ is_num_2
    CMP A, 3
    JZ is_num_3
    CMP A, 4
    JZ is_num_4
    CMP A, 5
    JZ is_num_5
    CMP A, 6
    JZ is_num_6
    CMP A, 7
    JZ is_num_7
    CMP A, 8
    JZ is_num_8
    CMP A, 9
    JZ is_num_9
    CMP A, 0xA
    JZ is_num_A
    CMP A, 0xB
    JZ is_num_B
    CMP A, 0xC
    JZ is_num_C
    CMP A, 0xD
    JZ is_num_D
    CMP A, 0xE
    JZ is_num_E
    CMP A, 0xF
    JZ is_num_F
    
    MOV A, 0
    RET
    
    is_num_0:
        MOV A, KEY_0
        RET
    is_num_1:
        MOV A, KEY_1
        RET
    is_num_2:
        MOV A, KEY_2
        RET
    is_num_3:
        MOV A, KEY_3
        RET
    is_num_4:
        MOV A, KEY_4
        RET
    is_num_5:
        MOV A, KEY_5
        RET
    is_num_6:
        MOV A, KEY_6
        RET
    is_num_7:
        MOV A, KEY_7
        RET
    is_num_8:
        MOV A, KEY_8
        RET
    is_num_9:
        MOV A, KEY_9
        RET
    is_num_A:
        MOV A, KEY_A
        RET
    is_num_B:
        MOV A, KEY_B
        RET
    is_num_C:
        MOV A, KEY_C
        RET
    is_num_D:
        MOV A, KEY_D
        RET
    is_num_E:
        MOV A, KEY_E
        RET
    is_num_F:
        MOV A, KEY_F
        RET
;_ItoAHEX end

;   ItoAString(char *addr, int number)
_ItoAString:    
    PUSH BP ; bp+0
    MOV BP, SP
    PUSH A
    PUSH Y

    MOV A, [BP+2]       ; number to be converted
    PUSH 0

ItoAString_loop:
    MOV Y, 0
    DIV 10
    ADD Y, 0x30
    PUSH Y
    TEST A,A
    JNZ ItoAString_loop

    MOV A, [BP+3]       ; address to store it
ItoAString_store_result_loop:
    POP Y
    MOV [A], Y
    ADD A, 1
    TEST Y,Y
    JNZ ItoAString_store_result_loop

    POP Y
    POP A
    POP BP
    RET 2
;_ItoAString end

;   ItoAHexString(char *addr, int number)
_ItoAHexString:
    PUSH BP ; bp+0
    MOV BP, SP
    PUSH A
    PUSH X

    MOV X, [BP+2]       ; number to be converted
    PUSH 0

ItoAHexString_loop:
    MOV A, X
    AND A, 0x000F
    SHR X, 4
    CALL _ItoAHEX
    PUSH A
    TEST X, X
    JNZ ItoAHexString_loop

    MOV A, [BP+3]       ; address to store it
ItoAHexString_store_result_loop:
    POP X
    MOV [A], X
    ADD A, 1
    TEST X,X
    JNZ ItoAHexString_store_result_loop

    POP X
    POP A
    POP BP
    RET 2
;_ItoAHexString end

; Read keyboard input into buffer
; Makes initial _NextKey call
_KeyboardRead:
    MOV A, keyboard_buffer
    MOV B, 0
    MOV C, 16
    CALL _Memset

    MOV [next_key], keyboard_buffer

    MOV A, 1
    MOV C, 0
    MOV X, keyboard_buffer
KeyboardRead_loop:
    HWI KB_HW
    TEST B,B
    JZ KeyboardRead_done
    MOV [X], B
    ADD X, 1
    JMP KeyboardRead_loop

KeyboardRead_done:
    CALL _NextKey
    RET
;_KeyboardRead end

; Get next key value into [key]
_NextKey:
    PUSH A
    MOV A, [next_key]
    TEST [A], [A]
    JZ NextKey_none
    MOV [key], [A]
    ADD A, 1
    MOV [next_key], A
    JMP NextKey_done
NextKey_none:
    MOV [key], 0
NextKey_done:
    POP A
    RET
;_NextKey end

; print current size of heap
_PrintHeapSize:
    CALL _ClearConsoleBuffer

    PUSH heap_text
    CALL _AddToConsoleBuffer

    PUSH heap_size_text
    CALL _AddToConsoleBuffer

    MOV A, itoa_result
    MOV B, 0
    MOV C, 8
    CALL _Memset

    PUSH itoa_result
    PUSH [____heap_size]
    CALL _ItoAString

    PUSH itoa_result
    CALL _AddToConsoleBuffer

    CALL _WriteConsoleBuffer

    RET
heap_text: DW "heap\n", 3 DUP(0)
heap_size_text: DW "size", 0x3A, 3 DUP(0)
;_PrintHeapSize end

; print malloc results
; call like you would call Malloc
; except it overwrites lots of registers
_PrintMalloc:
    PUSH BP
    MOV BP, SP

    CALL _ClearConsoleBuffer

    PUSH [BP+2]     ; size
    CALL _Malloc

    MOV D, A        ; Hold on to the pointer in D for now

    PUSH malloc_text
    CALL _AddToConsoleBuffer

    PUSH malloc_addr_text
    CALL _AddToConsoleBuffer

    ; write [[BP+3]]
    MOV A, itoa_result
    MOV B, 0
    MOV C, 8
    CALL _Memset

    PUSH itoa_result
    PUSH D                  ; we want the address the void* is pointing at
    CALL _ItoAHexString

    PUSH itoa_result
    CALL _AddToConsoleBuffer

    PUSH new_line
    CALL _AddToConsoleBuffer

    PUSH malloc_size_text
    CALL _AddToConsoleBuffer

    MOV A, itoa_result
    MOV B, 0
    MOV C, 8
    CALL _Memset

    PUSH itoa_result
    PUSH [BP+2]
    CALL _ItoAString

    PUSH itoa_result
    CALL _AddToConsoleBuffer

    CALL _WriteConsoleBuffer

    MOV A, D       ; put pointer back in A

    POP BP
    RET
malloc_text: DW "Malloc\n",0
malloc_addr_text: DW "Addr", 0x3a, 3 DUP(0)
malloc_size_text: DW "Size", 0x3A, 3 DUP(0) ; 0x3a is a colon
;_PrintMalloc end

; Print _free results
; Call same as you would call _free
; Except it overwrites lots of registers
_PrintFree:
    PUSH BP
    MOV BP, SP

    CALL _ClearConsoleBuffer

    MOV Y, A            ; Y will hold ptr for now

    PUSH free_text
    CALL _AddToConsoleBuffer

    PUSH free_pre_text
    CALL _AddToConsoleBuffer

    MOV A, itoa_result
    MOV B, 0
    MOV C, 8
    CALL _Memset

    PUSH itoa_result
    PUSH Y
    CALL _ItoAHexString

    PUSH itoa_result
    CALL _AddToConsoleBuffer

    MOV A, Y        ; Put pointer back in A
    CALL _Free
    MOV Y, A

    PUSH new_line
    CALL _AddToConsoleBuffer

    PUSH free_post_text
    CALL _AddToConsoleBuffer

    MOV A, itoa_result
    MOV B, 0
    MOV C, 8
    CALL _Memset

    PUSH itoa_result
    PUSH Y
    CALL _ItoAHexString

    PUSH itoa_result
    CALL _AddToConsoleBuffer

    CALL _WriteConsoleBuffer

    MOV A, Y

    POP BP
    RET
free_text: DW "Free\n", 3 DUP(0)
free_pre_text: DW "Old", 0x3a, 4 DUP(0)
free_post_text: DW "New", 0x3A, 4 DUP(0) ; 0x3a is a colon
;_PrintFree end

; print realloc results
; call like you would call Realloc
; except it overwrites lots of registers
_PrintRealloc:
    PUSH BP
    MOV BP, SP

    MOV Y, A

    CALL _ClearConsoleBuffer

    PUSH realloc_text
    CALL _AddToConsoleBuffer

    PUSH realloc_old_text
    CALL _AddToConsoleBuffer

    ; write [[BP+3]]
    MOV A, itoa_result
    MOV B, 0
    MOV C, 8
    CALL _Memset

    PUSH itoa_result
    PUSH Y
    CALL _ItoAHexString

    PUSH itoa_result
    CALL _AddToConsoleBuffer

    MOV A, Y
    PUSH [BP+2]     ; size
    CALL _Realloc

    MOV Y,A         ; Hold the new pointer in Y

    PUSH new_line
    CALL _AddToConsoleBuffer

    PUSH realloc_new_text
    CALL _AddToConsoleBuffer

    MOV A, itoa_result
    MOV B, 0
    MOV C, 8
    CALL _Memset

    PUSH itoa_result
    PUSH Y
    CALL _ItoAHexString

    PUSH itoa_result
    CALL _AddToConsoleBuffer

    PUSH new_line
    CALL _AddToConsoleBuffer

    PUSH realloc_size_text
    CALL _AddToConsoleBuffer

    MOV A, itoa_result
    MOV B, 0
    MOV C, 8
    CALL _Memset

    PUSH itoa_result
    PUSH [BP+2]
    CALL _ItoAString

    PUSH itoa_result
    CALL _AddToConsoleBuffer

    CALL _WriteConsoleBuffer

    MOV A, Y       ; put pointer back in A

    POP BP
    RET
realloc_text: DW "Realloc\n",0
realloc_old_text: DW "Old", 0x3a, 4 DUP(0)
realloc_new_text: DW "New", 0x3a, 4 DUP(0)
realloc_size_text: DW "Size", 0x3A, 3 DUP(0) ; 0x3a is a colon
;_PrintRealloc end

; print calloc results
; call like you would call Calloc
; except it overwrites lots of registers
_PrintCalloc:
    PUSH BP
    MOV BP, SP

    CALL _ClearConsoleBuffer

    PUSH [BP+2]     ; size
    CALL _Calloc

    MOV D, A        ; Hold on to the pointer in D for now

    PUSH calloc_text
    CALL _AddToConsoleBuffer

    PUSH calloc_addr_text
    CALL _AddToConsoleBuffer

    ; write [[BP+3]]
    MOV A, itoa_result
    MOV B, 0
    MOV C, 8
    CALL _Memset

    PUSH itoa_result
    PUSH D                  ; we want the address the void* is pointing at
    CALL _ItoAHexString

    PUSH itoa_result
    CALL _AddToConsoleBuffer

    PUSH new_line
    CALL _AddToConsoleBuffer

    PUSH calloc_size_text
    CALL _AddToConsoleBuffer

    MOV A, itoa_result
    MOV B, 0
    MOV C, 8
    CALL _Memset

    PUSH itoa_result
    PUSH [BP+2]
    CALL _ItoAString

    PUSH itoa_result
    CALL _AddToConsoleBuffer

    CALL _WriteConsoleBuffer

    MOV A, D       ; put pointer back in A

    POP BP
    RET
calloc_text: DW "Calloc\n",0
calloc_addr_text: DW "Addr", 0x3a, 3 DUP(0)
calloc_size_text: DW "Size", 0x3A, 3 DUP(0) ; 0x3a is a colon
;_PrintMalloc end

; Clear the console buffer
_ClearConsoleBuffer:
    PUSH A
    PUSH B
    PUSH C

    MOV A, console_buffer
    MOV B, 0
    MOV C, [console_buffer_len]
    CMP C, 0
    JZ clear_console_buffer_done

    CALL _Memset

clear_console_buffer_done:
    MOV [console_buffer_len], 0
    POP C
    POP B
    POP A
    RET
; _ClearConsoleBuffer end

; load string into console.
; char* terminated by null
_LoadConsoleBuffer:
    PUSH BP
    MOV BP, SP
    PUSH A
    PUSH B
    PUSH C

    CALL _ClearConsoleBuffer
    
    MOV B, [BP+2]   ; char *addr
    MOV A, console_buffer
    MOV C, 0
    CMP [B], 0
    JZ load_console_buffer_done
    
    ; find how long until null terminator
load_console_buffer_loop:
    ADD C, 1
    ADD B, 1
    CMP [B], 0
    JZ load_console_buffer_loop_done
    JMP load_console_buffer_loop

load_console_buffer_loop_done:
    MOV B, [BP+2]
    CALL _Memcpy

load_console_buffer_done:
    MOV [console_buffer_len], C
    CALL _WriteConsoleBuffer
    
    POP C
    POP B
    POP A
    POP BP
    RET 1
;_LoadConsoleBuffer end

; Add string into console buffer
; char* terminated by null
_AddToConsoleBuffer:
    PUSH BP
    MOV BP, SP
    PUSH A
    PUSH B
    PUSH C
    PUSH D
 
    MOV B, [BP+2]   ; char *addr
    MOV A, console_buffer
    MOV C, 0
    MOV D, [console_buffer_len]
    CMP [B], 0
    JZ add_to_console_buffer_done
    
    ; get length of char*
add_to_console_buffer_loop:
    ADD C, 1
    ADD B, 1
    CMP [B], 0
    JZ add_to_console_buffer_loop_done
    JMP add_to_console_buffer_loop

    ; check if buffer_len + char* len > buffer limit
add_to_console_buffer_loop_done:
    ADD D, C

    CMP D, BUFFER_LIMIT
    JGE add_to_console_buffer_done

    ; Append char* to [buffer+buffer_len]
    ADD A, [console_buffer_len]
    MOV B, [BP+2]
    CALL _Memcpy

add_to_console_buffer_done:    
    MOV [console_buffer_len], D

    POP D
    POP C
    POP B
    POP A
    POP BP
    RET 1
;_AddToConsoleBuffer end

; write console buffer to console
_WriteConsoleBuffer:
    PUSH A
    PUSH B
    PUSH C
    PUSH X

    MOV A, COM_PORT_SELF

    CMP [console_buffer_len], 0
    JZ write_console_buffer_done

    MOV X, new_line
    CALL _WriteConsoleX

    MOV X, line_text
    CALL _UpdateLineNumber
    CALL _WriteConsoleX

    MOV X, console_buffer
    MOV C, 0

write_console_buffer_loop:
    CMP [com_counter], 40
    JGE write_console_buffer_wait
    HWI COM_PORT_HW
    ADD [com_counter], 1
    ADD C, 8
    CMP C, [console_buffer_len]
    JG write_console_buffer_done
    ADD X, 8
    JMP write_console_buffer_loop

write_console_buffer_wait:
    CALL _Sleep
    JMP write_console_buffer_loop

write_console_buffer_done:
    
    POP X
    POP C
    POP B
    POP A
    RET
;_WriteConsoleBuffer end

_WriteConsoleX:
    PUSH A
    PUSH B

    CMP [com_counter], 40
    JL WriteConsoleX_okay

WriteConsoleX_sleep:
    CALL _Sleep

WriteConsoleX_okay:
    MOV A, COM_PORT_SELF
    HWI COM_PORT_HW
    ADD [com_counter], 1
    TEST B, B
    JZ WriteConsoleX_fail
WriteConsoleX_done:
    POP B
    POP A
    RET
WriteConsoleX_fail:
    MOV A, 2
    HWI HOLOGRAM_HW
    JMP WriteConsoleX_done
;_WriteConsoleX end

;;;;; heap code start

; Change this to say where you want the heap to
; limit as it's last usable address.
; It must be further than your heap label
HEAP_END_ADDR equ 0xF000

; void * memset ( void * ptr, int value, size_t num );
;
;   MOV A, dest
;   MOV B [value]
;   MOV B [size]
;   CALL __Memset
;
_Memset:
    PUSH A
    PUSH B
    PUSH C

    ADD C, A
___memset_loop:
    MOV [A], B
    ADD A, 1
    CMP A, C
    JL ___memset_loop

    POP C
    POP B
    POP A
    RET
;_Memset end

; void * memcpy ( void * destination, const void * source, size_t num );
;
;   MOV A, dest
;   MOV B, source
;   MOVE B [size]
;   CALL _Memcpy
;
_Memcpy:
    PUSH A
    PUSH B
    PUSH C

    ADD C, A
___memcpy_loop:
    MOV [A], [B]
    ADD B, 1
    ADD A, 1
    CMP A, C
    JL ___memcpy_loop

    POP C
    POP B
    POP A
    RET
;_Memcpy end

; A = Malloc(int size)
; usage: 
;
;   PUSH [size]     ; Push size to allocate
;   CALL _Malloc    ; A now points to first address of allocated memory
;   
;   PUSH pointer
;   PUSH 1
;   CALL _Malloc
;
;   TEST A, A
;   JZ failure
;
;   MOV [A], 5
;
;   Currently if you go over the heap limit things will just sort of not allocate
;   Sets A register to the new 
_Malloc:
    PUSH BP
    MOV BP, SP
    PUSH B
    PUSH C
    PUSH D
    PUSH X
    PUSH Y

    CALL __InitializeAllocator

    MOV D, [BP+2]   ; D is the size we want
    TEST D,D
    JZ ___Malloc_search_not_found      ; Don't waste time malloc(ptr,0)         ;;; this could be changed to make a pointer that's distinctly set to [0]?

    ADD D, 2        ; We need to have add room for the control word and the range word

    CMP [____heap_total_available], D
    JC ___Malloc_search_not_found      ; Fail if heap total < requested size

    MOV C, [____heap_size]              ; Get current total allocated
    ADD C, D                        ; Add the new size we want
    JC ___Malloc_search_not_found      ; fail if new size + ____heap_size > 0xFFFF
    CMP [____heap_total_available],C    ; Check if the new total is more than is available
    JC ___Malloc_search_not_found      ; Fail if taking up too much memory

    MOV X, heap     ; X is the heap pointer

___Malloc_search_loop:
    TEST [X], [X]  ; if X address is allocated, move on to the next available address
    JNZ ___Malloc_search_loop_continue

    MOV A, X
    CALL __CombineEmptyBlocks

    MOV B, [X+1]    ; Get our available space this block

    TEST B, B       ; if size hasn't been set, we're good to go
    JZ ___Malloc_search_found_size_zero

    CMP D, B        ; if Our size is less than or equal to the space available, take the spot
    JLE  ___Malloc_search_found_existing

    ADD X, B

    JMP ___Malloc_search_loop_continue

___Malloc_search_loop_continue:
    ADD X, [X+1]        ; increment by range word
    JMP ___Malloc_search_loop

___Malloc_search_found_size_zero:
    ADD [____heap_size], D              ; ADD new block our heap size

    MOV A, X
    MOV [A], 0                      ; Make sure the next control word
    MOV [A+1], 0                    ; and range word are 0

    JMP ___Malloc_search_found
___Malloc_search_found_existing:
    SUB B, D                        ; Remove our current size from the existing free block
    CMP B, 3                        ; If there's less than 3 blocks left, take them
    JGE ___Malloc_search_found_existing_skip
    ADD D, B
___Malloc_search_found_existing_skip:
    MOV A, X                        ; Copy address of current control word
    ADD A, D                        ; Mov current size forward to create a new block control word
    TEST [A], [A]
    JNZ ___Malloc_search_found      ; If block allocated, do not overwrite
    MOV [A+1], B                    ; If not allocated, set the new space available

___Malloc_search_found:
    MOV [X+1], D                    ; Set the range word
    MOV [X], 1                      ; Set the control word
    ADD X,2                         ; Do not send back the allocator control word or the range word
    MOV A, X                      ; Send back the allocated memory address

    JMP ___Malloc_done

___Malloc_search_not_found:
    MOV A, 0      ; We could not alloc, sad day

___Malloc_done:
    POP Y
    POP X
    POP D
    POP C
    POP B
    POP BP
    RET 1   ; we pushed 1 thing to call
;_Malloc end

; free(void *ptr)
; usage:
;
;   MOV A, [ptr]    ; Push pointer
;   CALL _Free      ; If successful A will now be zero
;                   ; If you tried to free something outside of the heap
;                   ; It will remain as it was
;   TEST A, A
;   JZ failure
;
; Does not change any registers
_Free:
    PUSH BP
    MOV BP, SP
    PUSH B
    PUSH C
    PUSH Y

    CALL __InitializeAllocator

    MOV Y, A            ; Y is ptr
    ;MOV X, [Y]         ; X is the location Y is pointing at
    SUB Y, 2

    CMP Y, heap    ; if Y is less than the heap starting point, this is not ours
    JC ___Free_done

    MOV C, [____heap_size]
    ADD C, heap     ; add heap address and ____heap_size to get to the end of the heap
    CMP C,Y        ; if Y is greater than the heap ending point, this is not ours
    JC  ___Free_done
    
    MOV [Y], 0        ; Unset the control word
    MOV A, 0            ; Set pointer to nil

___Free_done:
    POP Y
    POP C
    POP B
    POP BP
    RET
;_Free end

; A = realloc (void *ptr, int new_size)
;
;   MOV A, [ptr]        ; Push address of existing pointer
;   PUSH [new_size]     ; Push new size you want
;   CALL _Realloc
;
;   TEST A, A           ; if [A]  is zero, realloc has failed
;   JZ  failure         ; pointer is freed
_Realloc:
    PUSH BP
    MOV BP, SP
    PUSH B
    PUSH C

    CALL __InitializeAllocator

    MOV B, A        ; B is old pointer (at data section)

    ; alloc
    PUSH [BP+2]     ; alloc a new block of new_size
    CALL _Malloc    ; this puts the new pointer in A

    ; memcpy
                    ; A is already new pointer
                    ; B is already old pointer
    MOV C, [B-1]    ; Get the old pointer's range word
    CMP C, [A-1]    ; Check if old size is larger than new size
    JL ___Realloc_old_smaller
    MOV C, [A-1]    ; old size is currently in C, if new size is bigger use old size
___Realloc_old_smaller:
    SUB C, 2        ; account for allocated/range words
    CALL _Memcpy

    MOV C, A        ; C is the new pointer
    ; free
    MOV A, B        ; Free the old pointer
    CALL _Free

    MOV A,C         ; Return new pointer in A

    POP C
    POP B
    POP BP
    RET 1
;_Realloc end

; A = Calloc(int size)
; usage:
;
;   PUSH [size]     ; Push size to allocate
;   CALL _Calloc    ; A now points to first address of allocated memory
;
;   PUSH pointer
;   PUSH 1
;   CALL _Calloc
;
;   TEST A, A
;   JZ failure
;
;   TEST [A], [A]   ; the block will always be zero'd out
;   JNZ failure
;
;   MOV [A], 5
;
_Calloc:
    PUSH BP
    MOV BP, SP
    PUSH B
    PUSH C

    CALL __InitializeAllocator

    MOV C, [BP+2]   ; c is the size of our block

    PUSH C     ; push the size again for malloc
    CALL _Malloc

                    ; A is new pointer
    MOV B, 0        ; B is zero
                    ; C is our size
    CALL _Memset    ; Zero out the new block

    POP C
    POP B
    POP BP
    RET 1
;_Calloc end


; Combines empty blocks for found during malloc
__CombineEmptyBlocks:
    PUSH C
    PUSH D

    MOV C, A
    ADD C, [A+1]                ; we know current block is available, so move to next one

___CombineEmptyBlocks_loop:
    TEST [C], [C]               ; If the current control block is allocated, stop if so
    JNZ ___CombineEmptyBlocks_done

    TEST [C+1], [C+1]           ; Check if the current range word is zero
    JZ ___CombineEmptyBlocks_zero

    MOV D, C                    ; Hold on to current control word
    ADD D, [C+1]                ; Get to next control word

    ADD [A+1], [C+1]            ; Current block is free to add it's size onto A

    MOV [C+1], 0                ; Clear this block's size
    MOV C,D                     ; Move on to next control word
    JMP ___CombineEmptyBlocks_loop

___CombineEmptyBlocks_zero:
    SUB [____heap_size], [A+1]      ; We are at the end, this is no longer part of the heap
    MOV [A], 0                  ; If we came across a completely unset control bit
    MOV [A+1],0                 ; we must be at the end of the allocated section
___CombineEmptyBlocks_done:     ; of the heap
    POP D
    POP C
    RET
;__CombineEmptyBlocks end

; This MUST be called for heap to work
; All functions will attempt to call it to make sure
; It only needs to be called once
; Initialize allocator
; Set ____heap_total_available
__InitializeAllocator:
    TEST [____allocator_initialized], [____allocator_initialized]
    JNZ ___InitializeAllocator_done
    PUSH A
    MOV A, HEAP_END_ADDR   ; last address heap can try to occupy
    SUB A, heap
    JC __InvalidHeap
    MOV [____heap_total_available], A
    MOV [____allocator_initialized], 1
    POP A
___InitializeAllocator_done:
    RET
____heap_total_available: DW 0  ; This data is needed for the heap
____heap_size: DW 0             ; It will not work if removed
____allocator_initialized: DW 0 ; Make sure a user cannot run this multiple times
;__InitializeAllocator end

__InvalidHeap:
    MOV A, 2
    MOV X, ____InvalidHeap_holo_text
    HWI 0x0009
    MOV A, 3
    MOV X, ____InvalidHeap_text
    HWI 0x000D
    ADD X, 8
    HWI 0x000D
    ADD X, 8
    HWI 0x000D
    BRK
____InvalidHeap_text: DW "\nInvalid heap end", 7 DUP(0)
____InvalidHeap_holo_text: DW "Heap ERR",0
;__InvalidHeap end

;;;;; heap code end

.data
resume_vect: DW 0x0000
bp_cache: DW 0x0000
sp_cache: DW 0x0000

ran_once: DW FALSE

key: DW 0x0000
next_key: DW 0x0000
keyboard_buffer: DW 20 DUP(0)   ; if changed, KeyboardRead needs changing as well

line_counter: DW 0x0000
line_text: DW 8 DUP(0)

console_buffer: DW 0x200 DUP(0)
console_buffer_len: DW 0

com_counter: DW 0

itoa_result: DW 8 DUP(0)

debug_display: DW 0

new_line: DW 0x0A, 7 DUP(0)

test_data: DW "1234567",0
test_data_two: DW "test", 4 DUP(0)
begin_text: DW "Start", 3 DUP(0)

pointer_one: DW 0
pointer_two: DW 0
pointer_three: DW 0
pointer_four: DW 0

heap: DW 0